// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: medods.proto

package medodsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Medods_Doctors_FullMethodName              = "/proto.Medods/Doctors"
	Medods_Schedule_FullMethodName             = "/proto.Medods/Schedule"
	Medods_AppointmentsDuration_FullMethodName = "/proto.Medods/AppointmentsDuration"
	Medods_PatientFind_FullMethodName          = "/proto.Medods/PatientFind"
	Medods_MakeAppointment_FullMethodName      = "/proto.Medods/MakeAppointment"
	Medods_Healthcheck_FullMethodName          = "/proto.Medods/Healthcheck"
)

// MedodsClient is the client API for Medods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedodsClient interface {
	Doctors(ctx context.Context, in *DoctorsRequest, opts ...grpc.CallOption) (*DoctorsResponse, error)
	Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	AppointmentsDuration(ctx context.Context, in *AppointmentsDurationRequest, opts ...grpc.CallOption) (*AppointmentsDurationResponse, error)
	PatientFind(ctx context.Context, in *PatientFindRequest, opts ...grpc.CallOption) (*PatientFindResponse, error)
	MakeAppointment(ctx context.Context, in *MakeAppointmentRequest, opts ...grpc.CallOption) (*MakeAppointmentResponse, error)
	Healthcheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthcheckResponse, error)
}

type medodsClient struct {
	cc grpc.ClientConnInterface
}

func NewMedodsClient(cc grpc.ClientConnInterface) MedodsClient {
	return &medodsClient{cc}
}

func (c *medodsClient) Doctors(ctx context.Context, in *DoctorsRequest, opts ...grpc.CallOption) (*DoctorsResponse, error) {
	out := new(DoctorsResponse)
	err := c.cc.Invoke(ctx, Medods_Doctors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medodsClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, Medods_Schedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medodsClient) AppointmentsDuration(ctx context.Context, in *AppointmentsDurationRequest, opts ...grpc.CallOption) (*AppointmentsDurationResponse, error) {
	out := new(AppointmentsDurationResponse)
	err := c.cc.Invoke(ctx, Medods_AppointmentsDuration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medodsClient) PatientFind(ctx context.Context, in *PatientFindRequest, opts ...grpc.CallOption) (*PatientFindResponse, error) {
	out := new(PatientFindResponse)
	err := c.cc.Invoke(ctx, Medods_PatientFind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medodsClient) MakeAppointment(ctx context.Context, in *MakeAppointmentRequest, opts ...grpc.CallOption) (*MakeAppointmentResponse, error) {
	out := new(MakeAppointmentResponse)
	err := c.cc.Invoke(ctx, Medods_MakeAppointment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medodsClient) Healthcheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthcheckResponse, error) {
	out := new(HealthcheckResponse)
	err := c.cc.Invoke(ctx, Medods_Healthcheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedodsServer is the server API for Medods service.
// All implementations must embed UnimplementedMedodsServer
// for forward compatibility
type MedodsServer interface {
	Doctors(context.Context, *DoctorsRequest) (*DoctorsResponse, error)
	Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
	AppointmentsDuration(context.Context, *AppointmentsDurationRequest) (*AppointmentsDurationResponse, error)
	PatientFind(context.Context, *PatientFindRequest) (*PatientFindResponse, error)
	MakeAppointment(context.Context, *MakeAppointmentRequest) (*MakeAppointmentResponse, error)
	Healthcheck(context.Context, *Empty) (*HealthcheckResponse, error)
	mustEmbedUnimplementedMedodsServer()
}

// UnimplementedMedodsServer must be embedded to have forward compatible implementations.
type UnimplementedMedodsServer struct {
}

func (UnimplementedMedodsServer) Doctors(context.Context, *DoctorsRequest) (*DoctorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Doctors not implemented")
}
func (UnimplementedMedodsServer) Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}
func (UnimplementedMedodsServer) AppointmentsDuration(context.Context, *AppointmentsDurationRequest) (*AppointmentsDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppointmentsDuration not implemented")
}
func (UnimplementedMedodsServer) PatientFind(context.Context, *PatientFindRequest) (*PatientFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatientFind not implemented")
}
func (UnimplementedMedodsServer) MakeAppointment(context.Context, *MakeAppointmentRequest) (*MakeAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeAppointment not implemented")
}
func (UnimplementedMedodsServer) Healthcheck(context.Context, *Empty) (*HealthcheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthcheck not implemented")
}
func (UnimplementedMedodsServer) mustEmbedUnimplementedMedodsServer() {}

// UnsafeMedodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedodsServer will
// result in compilation errors.
type UnsafeMedodsServer interface {
	mustEmbedUnimplementedMedodsServer()
}

func RegisterMedodsServer(s grpc.ServiceRegistrar, srv MedodsServer) {
	s.RegisterService(&Medods_ServiceDesc, srv)
}

func _Medods_Doctors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedodsServer).Doctors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Medods_Doctors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedodsServer).Doctors(ctx, req.(*DoctorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Medods_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedodsServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Medods_Schedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedodsServer).Schedule(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Medods_AppointmentsDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentsDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedodsServer).AppointmentsDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Medods_AppointmentsDuration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedodsServer).AppointmentsDuration(ctx, req.(*AppointmentsDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Medods_PatientFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedodsServer).PatientFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Medods_PatientFind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedodsServer).PatientFind(ctx, req.(*PatientFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Medods_MakeAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedodsServer).MakeAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Medods_MakeAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedodsServer).MakeAppointment(ctx, req.(*MakeAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Medods_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedodsServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Medods_Healthcheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedodsServer).Healthcheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Medods_ServiceDesc is the grpc.ServiceDesc for Medods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Medods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Medods",
	HandlerType: (*MedodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Doctors",
			Handler:    _Medods_Doctors_Handler,
		},
		{
			MethodName: "Schedule",
			Handler:    _Medods_Schedule_Handler,
		},
		{
			MethodName: "AppointmentsDuration",
			Handler:    _Medods_AppointmentsDuration_Handler,
		},
		{
			MethodName: "PatientFind",
			Handler:    _Medods_PatientFind_Handler,
		},
		{
			MethodName: "MakeAppointment",
			Handler:    _Medods_MakeAppointment_Handler,
		},
		{
			MethodName: "Healthcheck",
			Handler:    _Medods_Healthcheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medods.proto",
}
